/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';

import {
  FieldMetadata,
  Item,
  WorkflowTransition,
} from './interfaces/interfaces';

declare global {

  namespace StencilComponents {
    interface DashboardGridOptionsMenu {

    }
  }

  interface HTMLDashboardGridOptionsMenuElement extends StencilComponents.DashboardGridOptionsMenu, HTMLStencilElement {}

  var HTMLDashboardGridOptionsMenuElement: {
    prototype: HTMLDashboardGridOptionsMenuElement;
    new (): HTMLDashboardGridOptionsMenuElement;
  };
  interface HTMLElementTagNameMap {
    'dashboard-grid-options-menu': HTMLDashboardGridOptionsMenuElement;
  }
  interface ElementTagNameMap {
    'dashboard-grid-options-menu': HTMLDashboardGridOptionsMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dashboard-grid-options-menu': JSXElements.DashboardGridOptionsMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface DashboardGridOptionsMenuAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DashboardGrid {

    }
  }

  interface HTMLDashboardGridElement extends StencilComponents.DashboardGrid, HTMLStencilElement {}

  var HTMLDashboardGridElement: {
    prototype: HTMLDashboardGridElement;
    new (): HTMLDashboardGridElement;
  };
  interface HTMLElementTagNameMap {
    'dashboard-grid': HTMLDashboardGridElement;
  }
  interface ElementTagNameMap {
    'dashboard-grid': HTMLDashboardGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dashboard-grid': JSXElements.DashboardGridAttributes;
    }
  }
  namespace JSXElements {
    export interface DashboardGridAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DashboardPane {
      'panelId': string;
    }
  }

  interface HTMLDashboardPaneElement extends StencilComponents.DashboardPane, HTMLStencilElement {}

  var HTMLDashboardPaneElement: {
    prototype: HTMLDashboardPaneElement;
    new (): HTMLDashboardPaneElement;
  };
  interface HTMLElementTagNameMap {
    'dashboard-pane': HTMLDashboardPaneElement;
  }
  interface ElementTagNameMap {
    'dashboard-pane': HTMLDashboardPaneElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dashboard-pane': JSXElements.DashboardPaneAttributes;
    }
  }
  namespace JSXElements {
    export interface DashboardPaneAttributes extends HTMLAttributes {
      'onPanelDeleted'?: (event: CustomEvent) => void;
      'panelId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CustomfieldsGroup {
      'addFieldsFromMetadata': (fieldMetadata: FieldMetadata[]) => Promise<void>;
      'fieldMetadataJson': string;
      'fieldValuesJson': string;
      'listId': string;
      'populateDefaultValues': boolean;
    }
  }

  interface HTMLCustomfieldsGroupElement extends StencilComponents.CustomfieldsGroup, HTMLStencilElement {}

  var HTMLCustomfieldsGroupElement: {
    prototype: HTMLCustomfieldsGroupElement;
    new (): HTMLCustomfieldsGroupElement;
  };
  interface HTMLElementTagNameMap {
    'customfields-group': HTMLCustomfieldsGroupElement;
  }
  interface ElementTagNameMap {
    'customfields-group': HTMLCustomfieldsGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'customfields-group': JSXElements.CustomfieldsGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface CustomfieldsGroupAttributes extends HTMLAttributes {
      'fieldMetadataJson'?: string;
      'fieldValuesJson'?: string;
      'listId'?: string;
      'onCustomFieldValueChanged'?: (event: CustomEvent) => void;
      'populateDefaultValues'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FieldCreate {

    }
  }

  interface HTMLFieldCreateElement extends StencilComponents.FieldCreate, HTMLStencilElement {}

  var HTMLFieldCreateElement: {
    prototype: HTMLFieldCreateElement;
    new (): HTMLFieldCreateElement;
  };
  interface HTMLElementTagNameMap {
    'field-create': HTMLFieldCreateElement;
  }
  interface ElementTagNameMap {
    'field-create': HTMLFieldCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'field-create': JSXElements.FieldCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface FieldCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface FieldDetail {
      'fieldId': string;
      'returnUrl': string;
    }
  }

  interface HTMLFieldDetailElement extends StencilComponents.FieldDetail, HTMLStencilElement {}

  var HTMLFieldDetailElement: {
    prototype: HTMLFieldDetailElement;
    new (): HTMLFieldDetailElement;
  };
  interface HTMLElementTagNameMap {
    'field-detail': HTMLFieldDetailElement;
  }
  interface ElementTagNameMap {
    'field-detail': HTMLFieldDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'field-detail': JSXElements.FieldDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface FieldDetailAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'returnUrl'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FieldsList {
      'subtitle': string;
    }
  }

  interface HTMLFieldsListElement extends StencilComponents.FieldsList, HTMLStencilElement {}

  var HTMLFieldsListElement: {
    prototype: HTMLFieldsListElement;
    new (): HTMLFieldsListElement;
  };
  interface HTMLElementTagNameMap {
    'fields-list': HTMLFieldsListElement;
  }
  interface ElementTagNameMap {
    'fields-list': HTMLFieldsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'fields-list': JSXElements.FieldsListAttributes;
    }
  }
  namespace JSXElements {
    export interface FieldsListAttributes extends HTMLAttributes {
      'subtitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImagecaptureField {

    }
  }

  interface HTMLImagecaptureFieldElement extends StencilComponents.ImagecaptureField, HTMLStencilElement {}

  var HTMLImagecaptureFieldElement: {
    prototype: HTMLImagecaptureFieldElement;
    new (): HTMLImagecaptureFieldElement;
  };
  interface HTMLElementTagNameMap {
    'imagecapture-field': HTMLImagecaptureFieldElement;
  }
  interface ElementTagNameMap {
    'imagecapture-field': HTMLImagecaptureFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'imagecapture-field': JSXElements.ImagecaptureFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface ImagecaptureFieldAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LinkeditemsField {
      'linkedItemsJson': string;
    }
  }

  interface HTMLLinkeditemsFieldElement extends StencilComponents.LinkeditemsField, HTMLStencilElement {}

  var HTMLLinkeditemsFieldElement: {
    prototype: HTMLLinkeditemsFieldElement;
    new (): HTMLLinkeditemsFieldElement;
  };
  interface HTMLElementTagNameMap {
    'linkeditems-field': HTMLLinkeditemsFieldElement;
  }
  interface ElementTagNameMap {
    'linkeditems-field': HTMLLinkeditemsFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'linkeditems-field': JSXElements.LinkeditemsFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface LinkeditemsFieldAttributes extends HTMLAttributes {
      'linkedItemsJson'?: string;
      'onLinkedItemAdded'?: (event: CustomEvent) => void;
      'onLinkedItemClicked'?: (event: CustomEvent) => void;
      'onLinkedItemRemoved'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SelectlistField {
      'fieldId': string;
      'fieldName': string;
      'fieldOptions': string;
      'fieldValue': string;
      'isMultiple': boolean;
      'isRequired': boolean;
    }
  }

  interface HTMLSelectlistFieldElement extends StencilComponents.SelectlistField, HTMLStencilElement {}

  var HTMLSelectlistFieldElement: {
    prototype: HTMLSelectlistFieldElement;
    new (): HTMLSelectlistFieldElement;
  };
  interface HTMLElementTagNameMap {
    'selectlist-field': HTMLSelectlistFieldElement;
  }
  interface ElementTagNameMap {
    'selectlist-field': HTMLSelectlistFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'selectlist-field': JSXElements.SelectlistFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface SelectlistFieldAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'fieldName'?: string;
      'fieldOptions'?: string;
      'fieldValue'?: string;
      'isMultiple'?: boolean;
      'isRequired'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TextareaField {
      'fieldId': string;
      'fieldName': string;
      'fieldValue': string;
      'isDisabled': boolean;
      'isRequired': boolean;
    }
  }

  interface HTMLTextareaFieldElement extends StencilComponents.TextareaField, HTMLStencilElement {}

  var HTMLTextareaFieldElement: {
    prototype: HTMLTextareaFieldElement;
    new (): HTMLTextareaFieldElement;
  };
  interface HTMLElementTagNameMap {
    'textarea-field': HTMLTextareaFieldElement;
  }
  interface ElementTagNameMap {
    'textarea-field': HTMLTextareaFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'textarea-field': JSXElements.TextareaFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface TextareaFieldAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'fieldName'?: string;
      'fieldValue'?: string;
      'isDisabled'?: boolean;
      'isRequired'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TextboxField {
      'fieldId': string;
      'fieldName': string;
      'fieldValue': string;
      'isDisabled': boolean;
      'isRequired': boolean;
    }
  }

  interface HTMLTextboxFieldElement extends StencilComponents.TextboxField, HTMLStencilElement {}

  var HTMLTextboxFieldElement: {
    prototype: HTMLTextboxFieldElement;
    new (): HTMLTextboxFieldElement;
  };
  interface HTMLElementTagNameMap {
    'textbox-field': HTMLTextboxFieldElement;
  }
  interface ElementTagNameMap {
    'textbox-field': HTMLTextboxFieldElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'textbox-field': JSXElements.TextboxFieldAttributes;
    }
  }
  namespace JSXElements {
    export interface TextboxFieldAttributes extends HTMLAttributes {
      'fieldId'?: string;
      'fieldName'?: string;
      'fieldValue'?: string;
      'isDisabled'?: boolean;
      'isRequired'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemTypeCreate {

    }
  }

  interface HTMLItemTypeCreateElement extends StencilComponents.ItemTypeCreate, HTMLStencilElement {}

  var HTMLItemTypeCreateElement: {
    prototype: HTMLItemTypeCreateElement;
    new (): HTMLItemTypeCreateElement;
  };
  interface HTMLElementTagNameMap {
    'item-type-create': HTMLItemTypeCreateElement;
  }
  interface ElementTagNameMap {
    'item-type-create': HTMLItemTypeCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-type-create': JSXElements.ItemTypeCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemTypeCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemTypeDetail {
      'itemTypeId': string;
      'returnUrl': string;
    }
  }

  interface HTMLItemTypeDetailElement extends StencilComponents.ItemTypeDetail, HTMLStencilElement {}

  var HTMLItemTypeDetailElement: {
    prototype: HTMLItemTypeDetailElement;
    new (): HTMLItemTypeDetailElement;
  };
  interface HTMLElementTagNameMap {
    'item-type-detail': HTMLItemTypeDetailElement;
  }
  interface ElementTagNameMap {
    'item-type-detail': HTMLItemTypeDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-type-detail': JSXElements.ItemTypeDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemTypeDetailAttributes extends HTMLAttributes {
      'itemTypeId'?: string;
      'returnUrl'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemTypesList {
      'subtitle': string;
    }
  }

  interface HTMLItemTypesListElement extends StencilComponents.ItemTypesList, HTMLStencilElement {}

  var HTMLItemTypesListElement: {
    prototype: HTMLItemTypesListElement;
    new (): HTMLItemTypesListElement;
  };
  interface HTMLElementTagNameMap {
    'item-types-list': HTMLItemTypesListElement;
  }
  interface ElementTagNameMap {
    'item-types-list': HTMLItemTypesListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-types-list': JSXElements.ItemTypesListAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemTypesListAttributes extends HTMLAttributes {
      'subtitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemCreateLocationOptionsMenu {

    }
  }

  interface HTMLItemCreateLocationOptionsMenuElement extends StencilComponents.ItemCreateLocationOptionsMenu, HTMLStencilElement {}

  var HTMLItemCreateLocationOptionsMenuElement: {
    prototype: HTMLItemCreateLocationOptionsMenuElement;
    new (): HTMLItemCreateLocationOptionsMenuElement;
  };
  interface HTMLElementTagNameMap {
    'item-create-location-options-menu': HTMLItemCreateLocationOptionsMenuElement;
  }
  interface ElementTagNameMap {
    'item-create-location-options-menu': HTMLItemCreateLocationOptionsMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-create-location-options-menu': JSXElements.ItemCreateLocationOptionsMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemCreateLocationOptionsMenuAttributes extends HTMLAttributes {
      'onGpsLocationSelected'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemCreate {
      'itemTypeId': string;
      'parentId': string;
    }
  }

  interface HTMLItemCreateElement extends StencilComponents.ItemCreate, HTMLStencilElement {}

  var HTMLItemCreateElement: {
    prototype: HTMLItemCreateElement;
    new (): HTMLItemCreateElement;
  };
  interface HTMLElementTagNameMap {
    'item-create': HTMLItemCreateElement;
  }
  interface ElementTagNameMap {
    'item-create': HTMLItemCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-create': JSXElements.ItemCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemCreateAttributes extends HTMLAttributes {
      'itemTypeId'?: string;
      'onItemCreated'?: (event: CustomEvent) => void;
      'parentId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemDetailOptionsMenu {
      'item': Item;
    }
  }

  interface HTMLItemDetailOptionsMenuElement extends StencilComponents.ItemDetailOptionsMenu, HTMLStencilElement {}

  var HTMLItemDetailOptionsMenuElement: {
    prototype: HTMLItemDetailOptionsMenuElement;
    new (): HTMLItemDetailOptionsMenuElement;
  };
  interface HTMLElementTagNameMap {
    'item-detail-options-menu': HTMLItemDetailOptionsMenuElement;
  }
  interface ElementTagNameMap {
    'item-detail-options-menu': HTMLItemDetailOptionsMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-detail-options-menu': JSXElements.ItemDetailOptionsMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemDetailOptionsMenuAttributes extends HTMLAttributes {
      'item'?: Item;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemDetail {
      'itemId': string;
    }
  }

  interface HTMLItemDetailElement extends StencilComponents.ItemDetail, HTMLStencilElement {}

  var HTMLItemDetailElement: {
    prototype: HTMLItemDetailElement;
    new (): HTMLItemDetailElement;
  };
  interface HTMLElementTagNameMap {
    'item-detail': HTMLItemDetailElement;
  }
  interface ElementTagNameMap {
    'item-detail': HTMLItemDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-detail': JSXElements.ItemDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemDetailAttributes extends HTMLAttributes {
      'itemId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemLocationOptionsMenu {

    }
  }

  interface HTMLItemLocationOptionsMenuElement extends StencilComponents.ItemLocationOptionsMenu, HTMLStencilElement {}

  var HTMLItemLocationOptionsMenuElement: {
    prototype: HTMLItemLocationOptionsMenuElement;
    new (): HTMLItemLocationOptionsMenuElement;
  };
  interface HTMLElementTagNameMap {
    'item-location-options-menu': HTMLItemLocationOptionsMenuElement;
  }
  interface ElementTagNameMap {
    'item-location-options-menu': HTMLItemLocationOptionsMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-location-options-menu': JSXElements.ItemLocationOptionsMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemLocationOptionsMenuAttributes extends HTMLAttributes {
      'onGpsLocationSelected'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemMap {
      'item': Item;
    }
  }

  interface HTMLItemMapElement extends StencilComponents.ItemMap, HTMLStencilElement {}

  var HTMLItemMapElement: {
    prototype: HTMLItemMapElement;
    new (): HTMLItemMapElement;
  };
  interface HTMLElementTagNameMap {
    'item-map': HTMLItemMapElement;
  }
  interface ElementTagNameMap {
    'item-map': HTMLItemMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-map': JSXElements.ItemMapAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemMapAttributes extends HTMLAttributes {
      'item'?: Item;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemQrSearch {

    }
  }

  interface HTMLItemQrSearchElement extends StencilComponents.ItemQrSearch, HTMLStencilElement {}

  var HTMLItemQrSearchElement: {
    prototype: HTMLItemQrSearchElement;
    new (): HTMLItemQrSearchElement;
  };
  interface HTMLElementTagNameMap {
    'item-qr-search': HTMLItemQrSearchElement;
  }
  interface ElementTagNameMap {
    'item-qr-search': HTMLItemQrSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-qr-search': JSXElements.ItemQrSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemQrSearchAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemSearch {

    }
  }

  interface HTMLItemSearchElement extends StencilComponents.ItemSearch, HTMLStencilElement {}

  var HTMLItemSearchElement: {
    prototype: HTMLItemSearchElement;
    new (): HTMLItemSearchElement;
  };
  interface HTMLElementTagNameMap {
    'item-search': HTMLItemSearchElement;
  }
  interface ElementTagNameMap {
    'item-search': HTMLItemSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'item-search': JSXElements.ItemSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemSearchAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemsListOptionsMenu {
      'itemTypeId': string;
    }
  }

  interface HTMLItemsListOptionsMenuElement extends StencilComponents.ItemsListOptionsMenu, HTMLStencilElement {}

  var HTMLItemsListOptionsMenuElement: {
    prototype: HTMLItemsListOptionsMenuElement;
    new (): HTMLItemsListOptionsMenuElement;
  };
  interface HTMLElementTagNameMap {
    'items-list-options-menu': HTMLItemsListOptionsMenuElement;
  }
  interface ElementTagNameMap {
    'items-list-options-menu': HTMLItemsListOptionsMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'items-list-options-menu': JSXElements.ItemsListOptionsMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemsListOptionsMenuAttributes extends HTMLAttributes {
      'itemTypeId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemsList {
      'displayNavMode': boolean;
      'itemTypeId': string;
      'parentId': string;
    }
  }

  interface HTMLItemsListElement extends StencilComponents.ItemsList, HTMLStencilElement {}

  var HTMLItemsListElement: {
    prototype: HTMLItemsListElement;
    new (): HTMLItemsListElement;
  };
  interface HTMLElementTagNameMap {
    'items-list': HTMLItemsListElement;
  }
  interface ElementTagNameMap {
    'items-list': HTMLItemsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'items-list': JSXElements.ItemsListAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemsListAttributes extends HTMLAttributes {
      'displayNavMode'?: boolean;
      'itemTypeId'?: string;
      'parentId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemsMap {
      'item': Item;
    }
  }

  interface HTMLItemsMapElement extends StencilComponents.ItemsMap, HTMLStencilElement {}

  var HTMLItemsMapElement: {
    prototype: HTMLItemsMapElement;
    new (): HTMLItemsMapElement;
  };
  interface HTMLElementTagNameMap {
    'items-map': HTMLItemsMapElement;
  }
  interface ElementTagNameMap {
    'items-map': HTMLItemsMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'items-map': JSXElements.ItemsMapAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemsMapAttributes extends HTMLAttributes {
      'item'?: Item;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ItemsSearch {

    }
  }

  interface HTMLItemsSearchElement extends StencilComponents.ItemsSearch, HTMLStencilElement {}

  var HTMLItemsSearchElement: {
    prototype: HTMLItemsSearchElement;
    new (): HTMLItemsSearchElement;
  };
  interface HTMLElementTagNameMap {
    'items-search': HTMLItemsSearchElement;
  }
  interface ElementTagNameMap {
    'items-search': HTMLItemsSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'items-search': JSXElements.ItemsSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface ItemsSearchAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LocationCreate {

    }
  }

  interface HTMLLocationCreateElement extends StencilComponents.LocationCreate, HTMLStencilElement {}

  var HTMLLocationCreateElement: {
    prototype: HTMLLocationCreateElement;
    new (): HTMLLocationCreateElement;
  };
  interface HTMLElementTagNameMap {
    'location-create': HTMLLocationCreateElement;
  }
  interface ElementTagNameMap {
    'location-create': HTMLLocationCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'location-create': JSXElements.LocationCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface LocationCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface LocationDetail {
      'itemLocationId': string;
    }
  }

  interface HTMLLocationDetailElement extends StencilComponents.LocationDetail, HTMLStencilElement {}

  var HTMLLocationDetailElement: {
    prototype: HTMLLocationDetailElement;
    new (): HTMLLocationDetailElement;
  };
  interface HTMLElementTagNameMap {
    'location-detail': HTMLLocationDetailElement;
  }
  interface ElementTagNameMap {
    'location-detail': HTMLLocationDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'location-detail': JSXElements.LocationDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface LocationDetailAttributes extends HTMLAttributes {
      'itemLocationId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LocationSearch {

    }
  }

  interface HTMLLocationSearchElement extends StencilComponents.LocationSearch, HTMLStencilElement {}

  var HTMLLocationSearchElement: {
    prototype: HTMLLocationSearchElement;
    new (): HTMLLocationSearchElement;
  };
  interface HTMLElementTagNameMap {
    'location-search': HTMLLocationSearchElement;
  }
  interface ElementTagNameMap {
    'location-search': HTMLLocationSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'location-search': JSXElements.LocationSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface LocationSearchAttributes extends HTMLAttributes {
      'onLocationSelected'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface LocationsList {

    }
  }

  interface HTMLLocationsListElement extends StencilComponents.LocationsList, HTMLStencilElement {}

  var HTMLLocationsListElement: {
    prototype: HTMLLocationsListElement;
    new (): HTMLLocationsListElement;
  };
  interface HTMLElementTagNameMap {
    'locations-list': HTMLLocationsListElement;
  }
  interface ElementTagNameMap {
    'locations-list': HTMLLocationsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'locations-list': JSXElements.LocationsListAttributes;
    }
  }
  namespace JSXElements {
    export interface LocationsListAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScreenCreate {

    }
  }

  interface HTMLScreenCreateElement extends StencilComponents.ScreenCreate, HTMLStencilElement {}

  var HTMLScreenCreateElement: {
    prototype: HTMLScreenCreateElement;
    new (): HTMLScreenCreateElement;
  };
  interface HTMLElementTagNameMap {
    'screen-create': HTMLScreenCreateElement;
  }
  interface ElementTagNameMap {
    'screen-create': HTMLScreenCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'screen-create': JSXElements.ScreenCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface ScreenCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScreenDetail {
      'returnUrl': string;
      'screenId': string;
    }
  }

  interface HTMLScreenDetailElement extends StencilComponents.ScreenDetail, HTMLStencilElement {}

  var HTMLScreenDetailElement: {
    prototype: HTMLScreenDetailElement;
    new (): HTMLScreenDetailElement;
  };
  interface HTMLElementTagNameMap {
    'screen-detail': HTMLScreenDetailElement;
  }
  interface ElementTagNameMap {
    'screen-detail': HTMLScreenDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'screen-detail': JSXElements.ScreenDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface ScreenDetailAttributes extends HTMLAttributes {
      'returnUrl'?: string;
      'screenId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScreenDisplay {
      'item': Item;
      'transition': WorkflowTransition;
    }
  }

  interface HTMLScreenDisplayElement extends StencilComponents.ScreenDisplay, HTMLStencilElement {}

  var HTMLScreenDisplayElement: {
    prototype: HTMLScreenDisplayElement;
    new (): HTMLScreenDisplayElement;
  };
  interface HTMLElementTagNameMap {
    'screen-display': HTMLScreenDisplayElement;
  }
  interface ElementTagNameMap {
    'screen-display': HTMLScreenDisplayElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'screen-display': JSXElements.ScreenDisplayAttributes;
    }
  }
  namespace JSXElements {
    export interface ScreenDisplayAttributes extends HTMLAttributes {
      'item'?: Item;
      'onScreenDisplayDismissed'?: (event: CustomEvent) => void;
      'transition'?: WorkflowTransition;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScreenSearch {

    }
  }

  interface HTMLScreenSearchElement extends StencilComponents.ScreenSearch, HTMLStencilElement {}

  var HTMLScreenSearchElement: {
    prototype: HTMLScreenSearchElement;
    new (): HTMLScreenSearchElement;
  };
  interface HTMLElementTagNameMap {
    'screen-search': HTMLScreenSearchElement;
  }
  interface ElementTagNameMap {
    'screen-search': HTMLScreenSearchElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'screen-search': JSXElements.ScreenSearchAttributes;
    }
  }
  namespace JSXElements {
    export interface ScreenSearchAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScreensList {
      'subtitle': string;
    }
  }

  interface HTMLScreensListElement extends StencilComponents.ScreensList, HTMLStencilElement {}

  var HTMLScreensListElement: {
    prototype: HTMLScreensListElement;
    new (): HTMLScreensListElement;
  };
  interface HTMLElementTagNameMap {
    'screens-list': HTMLScreensListElement;
  }
  interface ElementTagNameMap {
    'screens-list': HTMLScreensListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'screens-list': JSXElements.ScreensListAttributes;
    }
  }
  namespace JSXElements {
    export interface ScreensListAttributes extends HTMLAttributes {
      'subtitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UsersList {

    }
  }

  interface HTMLUsersListElement extends StencilComponents.UsersList, HTMLStencilElement {}

  var HTMLUsersListElement: {
    prototype: HTMLUsersListElement;
    new (): HTMLUsersListElement;
  };
  interface HTMLElementTagNameMap {
    'users-list': HTMLUsersListElement;
  }
  interface ElementTagNameMap {
    'users-list': HTMLUsersListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'users-list': JSXElements.UsersListAttributes;
    }
  }
  namespace JSXElements {
    export interface UsersListAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ConditionLinkedItemOfTypeInStatus {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLConditionLinkedItemOfTypeInStatusElement extends StencilComponents.ConditionLinkedItemOfTypeInStatus, HTMLStencilElement {}

  var HTMLConditionLinkedItemOfTypeInStatusElement: {
    prototype: HTMLConditionLinkedItemOfTypeInStatusElement;
    new (): HTMLConditionLinkedItemOfTypeInStatusElement;
  };
  interface HTMLElementTagNameMap {
    'condition-linked-item-of-type-in-status': HTMLConditionLinkedItemOfTypeInStatusElement;
  }
  interface ElementTagNameMap {
    'condition-linked-item-of-type-in-status': HTMLConditionLinkedItemOfTypeInStatusElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'condition-linked-item-of-type-in-status': JSXElements.ConditionLinkedItemOfTypeInStatusAttributes;
    }
  }
  namespace JSXElements {
    export interface ConditionLinkedItemOfTypeInStatusAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ConditionUserInGroup {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLConditionUserInGroupElement extends StencilComponents.ConditionUserInGroup, HTMLStencilElement {}

  var HTMLConditionUserInGroupElement: {
    prototype: HTMLConditionUserInGroupElement;
    new (): HTMLConditionUserInGroupElement;
  };
  interface HTMLElementTagNameMap {
    'condition-user-in-group': HTMLConditionUserInGroupElement;
  }
  interface ElementTagNameMap {
    'condition-user-in-group': HTMLConditionUserInGroupElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'condition-user-in-group': JSXElements.ConditionUserInGroupAttributes;
    }
  }
  namespace JSXElements {
    export interface ConditionUserInGroupAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ConditionUserInRole {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLConditionUserInRoleElement extends StencilComponents.ConditionUserInRole, HTMLStencilElement {}

  var HTMLConditionUserInRoleElement: {
    prototype: HTMLConditionUserInRoleElement;
    new (): HTMLConditionUserInRoleElement;
  };
  interface HTMLElementTagNameMap {
    'condition-user-in-role': HTMLConditionUserInRoleElement;
  }
  interface ElementTagNameMap {
    'condition-user-in-role': HTMLConditionUserInRoleElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'condition-user-in-role': JSXElements.ConditionUserInRoleAttributes;
    }
  }
  namespace JSXElements {
    export interface ConditionUserInRoleAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FunctionMakeApiCall {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLFunctionMakeApiCallElement extends StencilComponents.FunctionMakeApiCall, HTMLStencilElement {}

  var HTMLFunctionMakeApiCallElement: {
    prototype: HTMLFunctionMakeApiCallElement;
    new (): HTMLFunctionMakeApiCallElement;
  };
  interface HTMLElementTagNameMap {
    'function-make-api-call': HTMLFunctionMakeApiCallElement;
  }
  interface ElementTagNameMap {
    'function-make-api-call': HTMLFunctionMakeApiCallElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'function-make-api-call': JSXElements.FunctionMakeApiCallAttributes;
    }
  }
  namespace JSXElements {
    export interface FunctionMakeApiCallAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FunctionSendEmail {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLFunctionSendEmailElement extends StencilComponents.FunctionSendEmail, HTMLStencilElement {}

  var HTMLFunctionSendEmailElement: {
    prototype: HTMLFunctionSendEmailElement;
    new (): HTMLFunctionSendEmailElement;
  };
  interface HTMLElementTagNameMap {
    'function-send-email': HTMLFunctionSendEmailElement;
  }
  interface ElementTagNameMap {
    'function-send-email': HTMLFunctionSendEmailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'function-send-email': JSXElements.FunctionSendEmailAttributes;
    }
  }
  namespace JSXElements {
    export interface FunctionSendEmailAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FunctionSetFieldValue {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLFunctionSetFieldValueElement extends StencilComponents.FunctionSetFieldValue, HTMLStencilElement {}

  var HTMLFunctionSetFieldValueElement: {
    prototype: HTMLFunctionSetFieldValueElement;
    new (): HTMLFunctionSetFieldValueElement;
  };
  interface HTMLElementTagNameMap {
    'function-set-field-value': HTMLFunctionSetFieldValueElement;
  }
  interface ElementTagNameMap {
    'function-set-field-value': HTMLFunctionSetFieldValueElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'function-set-field-value': JSXElements.FunctionSetFieldValueAttributes;
    }
  }
  namespace JSXElements {
    export interface FunctionSetFieldValueAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ValidationFieldRequired {
      'functionArgs': any;
      'getFunctionArgs': () => string;
    }
  }

  interface HTMLValidationFieldRequiredElement extends StencilComponents.ValidationFieldRequired, HTMLStencilElement {}

  var HTMLValidationFieldRequiredElement: {
    prototype: HTMLValidationFieldRequiredElement;
    new (): HTMLValidationFieldRequiredElement;
  };
  interface HTMLElementTagNameMap {
    'validation-field-required': HTMLValidationFieldRequiredElement;
  }
  interface ElementTagNameMap {
    'validation-field-required': HTMLValidationFieldRequiredElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'validation-field-required': JSXElements.ValidationFieldRequiredAttributes;
    }
  }
  namespace JSXElements {
    export interface ValidationFieldRequiredAttributes extends HTMLAttributes {
      'functionArgs'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowNodeCreate {
      'workflowId': string;
    }
  }

  interface HTMLWorkflowNodeCreateElement extends StencilComponents.WorkflowNodeCreate, HTMLStencilElement {}

  var HTMLWorkflowNodeCreateElement: {
    prototype: HTMLWorkflowNodeCreateElement;
    new (): HTMLWorkflowNodeCreateElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-node-create': HTMLWorkflowNodeCreateElement;
  }
  interface ElementTagNameMap {
    'workflow-node-create': HTMLWorkflowNodeCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-node-create': JSXElements.WorkflowNodeCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowNodeCreateAttributes extends HTMLAttributes {
      'workflowId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowNodeDetail {
      'returnUrl': string;
      'workflowNodeId': string;
    }
  }

  interface HTMLWorkflowNodeDetailElement extends StencilComponents.WorkflowNodeDetail, HTMLStencilElement {}

  var HTMLWorkflowNodeDetailElement: {
    prototype: HTMLWorkflowNodeDetailElement;
    new (): HTMLWorkflowNodeDetailElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-node-detail': HTMLWorkflowNodeDetailElement;
  }
  interface ElementTagNameMap {
    'workflow-node-detail': HTMLWorkflowNodeDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-node-detail': JSXElements.WorkflowNodeDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowNodeDetailAttributes extends HTMLAttributes {
      'returnUrl'?: string;
      'workflowNodeId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowTransitionFunctionCreate {
      'functionTypeId': number;
      'transitionId': string;
    }
  }

  interface HTMLWorkflowTransitionFunctionCreateElement extends StencilComponents.WorkflowTransitionFunctionCreate, HTMLStencilElement {}

  var HTMLWorkflowTransitionFunctionCreateElement: {
    prototype: HTMLWorkflowTransitionFunctionCreateElement;
    new (): HTMLWorkflowTransitionFunctionCreateElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-transition-function-create': HTMLWorkflowTransitionFunctionCreateElement;
  }
  interface ElementTagNameMap {
    'workflow-transition-function-create': HTMLWorkflowTransitionFunctionCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-transition-function-create': JSXElements.WorkflowTransitionFunctionCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowTransitionFunctionCreateAttributes extends HTMLAttributes {
      'functionTypeId'?: number;
      'transitionId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowTransitionFunctionDetail {
      'returnUrl': string;
      'workflowTransitionFunctionId': string;
    }
  }

  interface HTMLWorkflowTransitionFunctionDetailElement extends StencilComponents.WorkflowTransitionFunctionDetail, HTMLStencilElement {}

  var HTMLWorkflowTransitionFunctionDetailElement: {
    prototype: HTMLWorkflowTransitionFunctionDetailElement;
    new (): HTMLWorkflowTransitionFunctionDetailElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-transition-function-detail': HTMLWorkflowTransitionFunctionDetailElement;
  }
  interface ElementTagNameMap {
    'workflow-transition-function-detail': HTMLWorkflowTransitionFunctionDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-transition-function-detail': JSXElements.WorkflowTransitionFunctionDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowTransitionFunctionDetailAttributes extends HTMLAttributes {
      'returnUrl'?: string;
      'workflowTransitionFunctionId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowTransitionCreate {
      'workflowId': string;
    }
  }

  interface HTMLWorkflowTransitionCreateElement extends StencilComponents.WorkflowTransitionCreate, HTMLStencilElement {}

  var HTMLWorkflowTransitionCreateElement: {
    prototype: HTMLWorkflowTransitionCreateElement;
    new (): HTMLWorkflowTransitionCreateElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-transition-create': HTMLWorkflowTransitionCreateElement;
  }
  interface ElementTagNameMap {
    'workflow-transition-create': HTMLWorkflowTransitionCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-transition-create': JSXElements.WorkflowTransitionCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowTransitionCreateAttributes extends HTMLAttributes {
      'workflowId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowTransitionDetail {
      'returnUrl': string;
      'workflowTransitionId': string;
    }
  }

  interface HTMLWorkflowTransitionDetailElement extends StencilComponents.WorkflowTransitionDetail, HTMLStencilElement {}

  var HTMLWorkflowTransitionDetailElement: {
    prototype: HTMLWorkflowTransitionDetailElement;
    new (): HTMLWorkflowTransitionDetailElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-transition-detail': HTMLWorkflowTransitionDetailElement;
  }
  interface ElementTagNameMap {
    'workflow-transition-detail': HTMLWorkflowTransitionDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-transition-detail': JSXElements.WorkflowTransitionDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowTransitionDetailAttributes extends HTMLAttributes {
      'returnUrl'?: string;
      'workflowTransitionId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowCreate {

    }
  }

  interface HTMLWorkflowCreateElement extends StencilComponents.WorkflowCreate, HTMLStencilElement {}

  var HTMLWorkflowCreateElement: {
    prototype: HTMLWorkflowCreateElement;
    new (): HTMLWorkflowCreateElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-create': HTMLWorkflowCreateElement;
  }
  interface ElementTagNameMap {
    'workflow-create': HTMLWorkflowCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-create': JSXElements.WorkflowCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowCreateAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowDetail {
      'returnUrl': string;
      'workflowId': string;
    }
  }

  interface HTMLWorkflowDetailElement extends StencilComponents.WorkflowDetail, HTMLStencilElement {}

  var HTMLWorkflowDetailElement: {
    prototype: HTMLWorkflowDetailElement;
    new (): HTMLWorkflowDetailElement;
  };
  interface HTMLElementTagNameMap {
    'workflow-detail': HTMLWorkflowDetailElement;
  }
  interface ElementTagNameMap {
    'workflow-detail': HTMLWorkflowDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflow-detail': JSXElements.WorkflowDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowDetailAttributes extends HTMLAttributes {
      'returnUrl'?: string;
      'workflowId'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WorkflowsList {
      'subtitle': string;
    }
  }

  interface HTMLWorkflowsListElement extends StencilComponents.WorkflowsList, HTMLStencilElement {}

  var HTMLWorkflowsListElement: {
    prototype: HTMLWorkflowsListElement;
    new (): HTMLWorkflowsListElement;
  };
  interface HTMLElementTagNameMap {
    'workflows-list': HTMLWorkflowsListElement;
  }
  interface ElementTagNameMap {
    'workflows-list': HTMLWorkflowsListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'workflows-list': JSXElements.WorkflowsListAttributes;
    }
  }
  namespace JSXElements {
    export interface WorkflowsListAttributes extends HTMLAttributes {
      'subtitle'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppRoot {

    }
  }

  interface HTMLAppRootElement extends StencilComponents.AppRoot, HTMLStencilElement {}

  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-root': JSXElements.AppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface AppRootAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppWelcome {

    }
  }

  interface HTMLAppWelcomeElement extends StencilComponents.AppWelcome, HTMLStencilElement {}

  var HTMLAppWelcomeElement: {
    prototype: HTMLAppWelcomeElement;
    new (): HTMLAppWelcomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-welcome': HTMLAppWelcomeElement;
  }
  interface ElementTagNameMap {
    'app-welcome': HTMLAppWelcomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-welcome': JSXElements.AppWelcomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppWelcomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface GpsSelector {
      'item': Item;
    }
  }

  interface HTMLGpsSelectorElement extends StencilComponents.GpsSelector, HTMLStencilElement {}

  var HTMLGpsSelectorElement: {
    prototype: HTMLGpsSelectorElement;
    new (): HTMLGpsSelectorElement;
  };
  interface HTMLElementTagNameMap {
    'gps-selector': HTMLGpsSelectorElement;
  }
  interface ElementTagNameMap {
    'gps-selector': HTMLGpsSelectorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gps-selector': JSXElements.GpsSelectorAttributes;
    }
  }
  namespace JSXElements {
    export interface GpsSelectorAttributes extends HTMLAttributes {
      'item'?: Item;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ImageCapturer {
      'imageFileName': string;
    }
  }

  interface HTMLImageCapturerElement extends StencilComponents.ImageCapturer, HTMLStencilElement {}

  var HTMLImageCapturerElement: {
    prototype: HTMLImageCapturerElement;
    new (): HTMLImageCapturerElement;
  };
  interface HTMLElementTagNameMap {
    'image-capturer': HTMLImageCapturerElement;
  }
  interface ElementTagNameMap {
    'image-capturer': HTMLImageCapturerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'image-capturer': JSXElements.ImageCapturerAttributes;
    }
  }
  namespace JSXElements {
    export interface ImageCapturerAttributes extends HTMLAttributes {
      'imageFileName'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface PageTutorial {

    }
  }

  interface HTMLPageTutorialElement extends StencilComponents.PageTutorial, HTMLStencilElement {}

  var HTMLPageTutorialElement: {
    prototype: HTMLPageTutorialElement;
    new (): HTMLPageTutorialElement;
  };
  interface HTMLElementTagNameMap {
    'page-tutorial': HTMLPageTutorialElement;
  }
  interface ElementTagNameMap {
    'page-tutorial': HTMLPageTutorialElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'page-tutorial': JSXElements.PageTutorialAttributes;
    }
  }
  namespace JSXElements {
    export interface PageTutorialAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface QrCameraScanner {
      'instructionText': string;
      'resetReader': () => void;
    }
  }

  interface HTMLQrCameraScannerElement extends StencilComponents.QrCameraScanner, HTMLStencilElement {}

  var HTMLQrCameraScannerElement: {
    prototype: HTMLQrCameraScannerElement;
    new (): HTMLQrCameraScannerElement;
  };
  interface HTMLElementTagNameMap {
    'qr-camera-scanner': HTMLQrCameraScannerElement;
  }
  interface ElementTagNameMap {
    'qr-camera-scanner': HTMLQrCameraScannerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'qr-camera-scanner': JSXElements.QrCameraScannerAttributes;
    }
  }
  namespace JSXElements {
    export interface QrCameraScannerAttributes extends HTMLAttributes {
      'instructionText'?: string;
      'onQrCodeScanned'?: (event: CustomEvent) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
